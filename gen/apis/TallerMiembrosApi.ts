/* tslint:disable */
/* eslint-disable */
/**
 * RepoBackend API
 * API para gesti√≥n de inventario y ventas (productos, stock, carritos, facturas, talleres, favoritos)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: devs@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface DemoteRequest {
    tallerId: string;
    memberUserId: string;
}

export interface PromoteRequest {
    tallerId: string;
    memberUserId: string;
}

export interface RemoveRequest {
    tallerId: string;
    memberUserId: string;
}

/**
 * 
 */
export class TallerMiembrosApi extends runtime.BaseAPI {

    /**
     * Remueve los permisos de administrador a un miembro del taller. Solo puede hacerlo el owner.
     * Demover miembro (remover rol ADMIN)
     */
    async demoteRaw(requestParameters: DemoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['tallerId'] == null) {
            throw new runtime.RequiredError(
                'tallerId',
                'Required parameter "tallerId" was null or undefined when calling demote().'
            );
        }

        if (requestParameters['memberUserId'] == null) {
            throw new runtime.RequiredError(
                'memberUserId',
                'Required parameter "memberUserId" was null or undefined when calling demote().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/talleres/{tallerId}/miembros/{memberUserId}/demote`.replace(`{${"tallerId"}}`, encodeURIComponent(String(requestParameters['tallerId']))).replace(`{${"memberUserId"}}`, encodeURIComponent(String(requestParameters['memberUserId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remueve los permisos de administrador a un miembro del taller. Solo puede hacerlo el owner.
     * Demover miembro (remover rol ADMIN)
     */
    async demote(requestParameters: DemoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.demoteRaw(requestParameters, initOverrides);
    }

    /**
     * Otorga permisos de administrador a un miembro del taller. Solo puede hacerlo el owner o un miembro ADMIN.
     * Promover miembro a ADMIN
     */
    async promoteRaw(requestParameters: PromoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['tallerId'] == null) {
            throw new runtime.RequiredError(
                'tallerId',
                'Required parameter "tallerId" was null or undefined when calling promote().'
            );
        }

        if (requestParameters['memberUserId'] == null) {
            throw new runtime.RequiredError(
                'memberUserId',
                'Required parameter "memberUserId" was null or undefined when calling promote().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/talleres/{tallerId}/miembros/{memberUserId}/promote`.replace(`{${"tallerId"}}`, encodeURIComponent(String(requestParameters['tallerId']))).replace(`{${"memberUserId"}}`, encodeURIComponent(String(requestParameters['memberUserId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Otorga permisos de administrador a un miembro del taller. Solo puede hacerlo el owner o un miembro ADMIN.
     * Promover miembro a ADMIN
     */
    async promote(requestParameters: PromoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.promoteRaw(requestParameters, initOverrides);
    }

    /**
     * Elimina un miembro del taller. Solo puede hacerlo el owner o un ADMIN.
     * Remover miembro del taller
     */
    async removeRaw(requestParameters: RemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['tallerId'] == null) {
            throw new runtime.RequiredError(
                'tallerId',
                'Required parameter "tallerId" was null or undefined when calling remove().'
            );
        }

        if (requestParameters['memberUserId'] == null) {
            throw new runtime.RequiredError(
                'memberUserId',
                'Required parameter "memberUserId" was null or undefined when calling remove().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/talleres/{tallerId}/miembros/{memberUserId}`.replace(`{${"tallerId"}}`, encodeURIComponent(String(requestParameters['tallerId']))).replace(`{${"memberUserId"}}`, encodeURIComponent(String(requestParameters['memberUserId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Elimina un miembro del taller. Solo puede hacerlo el owner o un ADMIN.
     * Remover miembro del taller
     */
    async remove(requestParameters: RemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeRaw(requestParameters, initOverrides);
    }

}
