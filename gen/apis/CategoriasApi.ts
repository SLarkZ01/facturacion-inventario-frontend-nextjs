/* tslint:disable */
/* eslint-disable */
/**
 * RepoBackend API
 * API para gestión de inventario y ventas (productos, stock, carritos, facturas, talleres, favoritos)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: devs@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CategoriaRequest,
} from '../models/index';
import {
    CategoriaRequestFromJSON,
    CategoriaRequestToJSON,
} from '../models/index';

export interface ActualizarCategoriaRequest {
    id: string;
    categoriaRequest: CategoriaRequest;
}

export interface CrearCategoriaRequest {
    categoriaRequest: CategoriaRequest;
}

export interface Eliminar1Request {
    id: string;
}

export interface GetCategoriaRequest {
    id: string;
}

export interface Listar2Request {
    q?: string;
    page?: number;
    size?: number;
}

/**
 * 
 */
export class CategoriasApi extends runtime.BaseAPI {

    /**
     * Actualizar categoría
     */
    async actualizarCategoriaRaw(requestParameters: ActualizarCategoriaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling actualizarCategoria().'
            );
        }

        if (requestParameters['categoriaRequest'] == null) {
            throw new runtime.RequiredError(
                'categoriaRequest',
                'Required parameter "categoriaRequest" was null or undefined when calling actualizarCategoria().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/categorias/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CategoriaRequestToJSON(requestParameters['categoriaRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Actualizar categoría
     */
    async actualizarCategoria(requestParameters: ActualizarCategoriaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.actualizarCategoriaRaw(requestParameters, initOverrides);
    }

    /**
     * Crea una nueva categoría de productos
     * Crear categoría
     */
    async crearCategoriaRaw(requestParameters: CrearCategoriaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['categoriaRequest'] == null) {
            throw new runtime.RequiredError(
                'categoriaRequest',
                'Required parameter "categoriaRequest" was null or undefined when calling crearCategoria().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/categorias`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CategoriaRequestToJSON(requestParameters['categoriaRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Crea una nueva categoría de productos
     * Crear categoría
     */
    async crearCategoria(requestParameters: CrearCategoriaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.crearCategoriaRaw(requestParameters, initOverrides);
    }

    /**
     * Eliminar categoría
     */
    async eliminar1Raw(requestParameters: Eliminar1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling eliminar1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/categorias/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Eliminar categoría
     */
    async eliminar1(requestParameters: Eliminar1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.eliminar1Raw(requestParameters, initOverrides);
    }

    /**
     * Obtener categoría
     */
    async getCategoriaRaw(requestParameters: GetCategoriaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getCategoria().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/categorias/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Obtener categoría
     */
    async getCategoria(requestParameters: GetCategoriaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getCategoriaRaw(requestParameters, initOverrides);
    }

    /**
     * Busca categorías por nombre. Si no se proporciona \'q\', devuelve lista vacía.
     * Buscar/listar categorías
     */
    async listar2Raw(requestParameters: Listar2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['q'] != null) {
            queryParameters['q'] = requestParameters['q'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/categorias`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Busca categorías por nombre. Si no se proporciona \'q\', devuelve lista vacía.
     * Buscar/listar categorías
     */
    async listar2(requestParameters: Listar2Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.listar2Raw(requestParameters, initOverrides);
    }

}
