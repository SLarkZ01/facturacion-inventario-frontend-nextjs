/* tslint:disable */
/* eslint-disable */
/**
 * RepoBackend API
 * API para gestión de inventario y ventas (productos, stock, carritos, facturas, talleres, favoritos)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: devs@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface DeleteRequest {
    productoId: string;
    almacenId: string;
}

export interface AdjustRequest {
    requestBody: { [key: string]: object; };
}

export interface GetByProductoRequest {
    productoId: string;
}

export interface SetRequest {
    requestBody: { [key: string]: object; };
}

/**
 * 
 */
export class StockApi extends runtime.BaseAPI {

    /**
     * Elimina el registro de stock para producto+almacén
     * Eliminar registro de stock
     */
    async _deleteRaw(requestParameters: DeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['productoId'] == null) {
            throw new runtime.RequiredError(
                'productoId',
                'Required parameter "productoId" was null or undefined when calling _delete().'
            );
        }

        if (requestParameters['almacenId'] == null) {
            throw new runtime.RequiredError(
                'almacenId',
                'Required parameter "almacenId" was null or undefined when calling _delete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['productoId'] != null) {
            queryParameters['productoId'] = requestParameters['productoId'];
        }

        if (requestParameters['almacenId'] != null) {
            queryParameters['almacenId'] = requestParameters['almacenId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/stock`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Elimina el registro de stock para producto+almacén
     * Eliminar registro de stock
     */
    async _delete(requestParameters: DeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this._deleteRaw(requestParameters, initOverrides);
    }

    /**
     * Aumenta o disminuye el stock en un almacén específico. Use valores positivos para aumentar y negativos para disminuir.
     * Ajustar stock (delta)
     */
    async adjustRaw(requestParameters: AdjustRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['requestBody'] == null) {
            throw new runtime.RequiredError(
                'requestBody',
                'Required parameter "requestBody" was null or undefined when calling adjust().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/stock/adjust`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Aumenta o disminuye el stock en un almacén específico. Use valores positivos para aumentar y negativos para disminuir.
     * Ajustar stock (delta)
     */
    async adjust(requestParameters: AdjustRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adjustRaw(requestParameters, initOverrides);
    }

    /**
     * Devuelve el stock disponible de un producto desglosado por almacén y el total consolidado
     * Obtener stock por producto
     */
    async getByProductoRaw(requestParameters: GetByProductoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['productoId'] == null) {
            throw new runtime.RequiredError(
                'productoId',
                'Required parameter "productoId" was null or undefined when calling getByProducto().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['productoId'] != null) {
            queryParameters['productoId'] = requestParameters['productoId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/stock`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Devuelve el stock disponible de un producto desglosado por almacén y el total consolidado
     * Obtener stock por producto
     */
    async getByProducto(requestParameters: GetByProductoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getByProductoRaw(requestParameters, initOverrides);
    }

    /**
     * Establece la cantidad exacta de stock en un almacén específico (reemplaza el valor anterior)
     * Setear stock
     */
    async setRaw(requestParameters: SetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['requestBody'] == null) {
            throw new runtime.RequiredError(
                'requestBody',
                'Required parameter "requestBody" was null or undefined when calling set().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/stock/set`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Establece la cantidad exacta de stock en un almacén específico (reemplaza el valor anterior)
     * Setear stock
     */
    async set(requestParameters: SetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.setRaw(requestParameters, initOverrides);
    }

}
