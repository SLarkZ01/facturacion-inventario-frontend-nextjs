/* tslint:disable */
/* eslint-disable */
/**
 * RepoBackend API
 * API para gestión de inventario y ventas (productos, stock, carritos, facturas, talleres, favoritos)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: devs@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface AcceptInvitacionRequest {
    requestBody: { [key: string]: string; };
}

export interface CrearAlmacenRequest {
    tallerId: string;
    requestBody: { [key: string]: string; };
}

export interface CrearInvitacionCodigoRequest {
    tallerId: string;
    requestBody: { [key: string]: object; };
}

export interface CrearTallerRequest {
    requestBody: { [key: string]: string; };
}

/**
 * 
 */
export class TalleresApi extends runtime.BaseAPI {

    /**
     * Permite a un usuario autenticado unirse a un taller usando un código de invitación válido
     * Aceptar invitación por código
     */
    async acceptInvitacionRaw(requestParameters: AcceptInvitacionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['requestBody'] == null) {
            throw new runtime.RequiredError(
                'requestBody',
                'Required parameter "requestBody" was null or undefined when calling acceptInvitacion().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/talleres/invitaciones/accept`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Permite a un usuario autenticado unirse a un taller usando un código de invitación válido
     * Aceptar invitación por código
     */
    async acceptInvitacion(requestParameters: AcceptInvitacionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.acceptInvitacionRaw(requestParameters, initOverrides);
    }

    /**
     * Crea un almacén dentro de un taller existente. Solo el owner o administradores del taller pueden crear almacenes.
     * Crear almacén en taller
     */
    async crearAlmacenRaw(requestParameters: CrearAlmacenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['tallerId'] == null) {
            throw new runtime.RequiredError(
                'tallerId',
                'Required parameter "tallerId" was null or undefined when calling crearAlmacen().'
            );
        }

        if (requestParameters['requestBody'] == null) {
            throw new runtime.RequiredError(
                'requestBody',
                'Required parameter "requestBody" was null or undefined when calling crearAlmacen().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/talleres/{tallerId}/almacenes`.replace(`{${"tallerId"}}`, encodeURIComponent(String(requestParameters['tallerId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Crea un almacén dentro de un taller existente. Solo el owner o administradores del taller pueden crear almacenes.
     * Crear almacén en taller
     */
    async crearAlmacen(requestParameters: CrearAlmacenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.crearAlmacenRaw(requestParameters, initOverrides);
    }

    /**
     * Genera un código de invitación para que usuarios puedan unirse a un taller. Roles disponibles: VENDEDOR, ADMIN, MECANICO.
     * Crear invitación por código
     */
    async crearInvitacionCodigoRaw(requestParameters: CrearInvitacionCodigoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['tallerId'] == null) {
            throw new runtime.RequiredError(
                'tallerId',
                'Required parameter "tallerId" was null or undefined when calling crearInvitacionCodigo().'
            );
        }

        if (requestParameters['requestBody'] == null) {
            throw new runtime.RequiredError(
                'requestBody',
                'Required parameter "requestBody" was null or undefined when calling crearInvitacionCodigo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/talleres/{tallerId}/invitaciones/codigo`.replace(`{${"tallerId"}}`, encodeURIComponent(String(requestParameters['tallerId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Genera un código de invitación para que usuarios puedan unirse a un taller. Roles disponibles: VENDEDOR, ADMIN, MECANICO.
     * Crear invitación por código
     */
    async crearInvitacionCodigo(requestParameters: CrearInvitacionCodigoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.crearInvitacionCodigoRaw(requestParameters, initOverrides);
    }

    /**
     * Crea un taller y lo asocia al usuario autenticado como propietario (owner)
     * Crear taller
     */
    async crearTallerRaw(requestParameters: CrearTallerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['requestBody'] == null) {
            throw new runtime.RequiredError(
                'requestBody',
                'Required parameter "requestBody" was null or undefined when calling crearTaller().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/talleres`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Crea un taller y lo asocia al usuario autenticado como propietario (owner)
     * Crear taller
     */
    async crearTaller(requestParameters: CrearTallerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.crearTallerRaw(requestParameters, initOverrides);
    }

    /**
     * Lista los talleres donde el usuario es owner
     * Listar talleres propios
     */
    async listMyTalleresRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/talleres`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Lista los talleres donde el usuario es owner
     * Listar talleres propios
     */
    async listMyTalleres(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.listMyTalleresRaw(initOverrides);
    }

}
