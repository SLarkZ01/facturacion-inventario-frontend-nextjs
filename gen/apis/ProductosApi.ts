/* tslint:disable */
/* eslint-disable */
/**
 * RepoBackend API
 * API para gestión de inventario y ventas (productos, stock, carritos, facturas, talleres, favoritos)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: devs@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ProductoRequest,
} from '../models/index';
import {
    ProductoRequestFromJSON,
    ProductoRequestToJSON,
} from '../models/index';

export interface ActualizarProductoRequest {
    id: string;
    productoRequest: ProductoRequest;
}

export interface AjustarStockRequest {
    id: string;
    requestBody: { [key: string]: object; };
}

export interface CrearProductoRequest {
    productoRequest: ProductoRequest;
}

export interface EliminarRequest {
    id: string;
}

export interface GetProductoRequest {
    id: string;
}

export interface ListarRequest {
    q?: string;
    categoriaId?: string;
    page?: number;
    size?: number;
}

/**
 * 
 */
export class ProductosApi extends runtime.BaseAPI {

    /**
     * Actualiza los datos del producto. Envía solo los campos que deseas actualizar.
     * Actualizar producto
     */
    async actualizarProductoRaw(requestParameters: ActualizarProductoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling actualizarProducto().'
            );
        }

        if (requestParameters['productoRequest'] == null) {
            throw new runtime.RequiredError(
                'productoRequest',
                'Required parameter "productoRequest" was null or undefined when calling actualizarProducto().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/productos/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProductoRequestToJSON(requestParameters['productoRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Actualiza los datos del producto. Envía solo los campos que deseas actualizar.
     * Actualizar producto
     */
    async actualizarProducto(requestParameters: ActualizarProductoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.actualizarProductoRaw(requestParameters, initOverrides);
    }

    /**
     * Ajusta el stock del producto sumando o restando una cantidad (delta). Usa valores positivos para aumentar y negativos para disminuir.
     * Ajustar stock de producto
     */
    async ajustarStockRaw(requestParameters: AjustarStockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ajustarStock().'
            );
        }

        if (requestParameters['requestBody'] == null) {
            throw new runtime.RequiredError(
                'requestBody',
                'Required parameter "requestBody" was null or undefined when calling ajustarStock().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/productos/{id}/stock`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Ajusta el stock del producto sumando o restando una cantidad (delta). Usa valores positivos para aumentar y negativos para disminuir.
     * Ajustar stock de producto
     */
    async ajustarStock(requestParameters: AjustarStockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.ajustarStockRaw(requestParameters, initOverrides);
    }

    /**
     * Crea un nuevo producto en el inventario
     * Crear producto
     */
    async crearProductoRaw(requestParameters: CrearProductoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['productoRequest'] == null) {
            throw new runtime.RequiredError(
                'productoRequest',
                'Required parameter "productoRequest" was null or undefined when calling crearProducto().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/productos`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductoRequestToJSON(requestParameters['productoRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Crea un nuevo producto en el inventario
     * Crear producto
     */
    async crearProducto(requestParameters: CrearProductoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.crearProductoRaw(requestParameters, initOverrides);
    }

    /**
     * Elimina un producto por ID
     * Eliminar producto
     */
    async eliminarRaw(requestParameters: EliminarRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling eliminar().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/productos/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Elimina un producto por ID
     * Eliminar producto
     */
    async eliminar(requestParameters: EliminarRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.eliminarRaw(requestParameters, initOverrides);
    }

    /**
     * Devuelve los detalles completos de un producto
     * Obtener producto por ID
     */
    async getProductoRaw(requestParameters: GetProductoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getProducto().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/productos/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Devuelve los detalles completos de un producto
     * Obtener producto por ID
     */
    async getProducto(requestParameters: GetProductoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getProductoRaw(requestParameters, initOverrides);
    }

    /**
     * Devuelve una lista paginada de productos. Soporta búsqueda por nombre (q) o filtrado por categoría (categoriaId).
     * Listar productos
     */
    async listarRaw(requestParameters: ListarRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['q'] != null) {
            queryParameters['q'] = requestParameters['q'];
        }

        if (requestParameters['categoriaId'] != null) {
            queryParameters['categoriaId'] = requestParameters['categoriaId'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/productos`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Devuelve una lista paginada de productos. Soporta búsqueda por nombre (q) o filtrado por categoría (categoriaId).
     * Listar productos
     */
    async listar(requestParameters: ListarRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.listarRaw(requestParameters, initOverrides);
    }

}
