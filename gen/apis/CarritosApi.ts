/* tslint:disable */
/* eslint-disable */
/**
 * RepoBackend API
 * API para gestión de inventario y ventas (productos, stock, carritos, facturas, talleres, favoritos)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: devs@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CarritoItemRequest,
  CarritoRequest,
} from '../models/index';
import {
    CarritoItemRequestFromJSON,
    CarritoItemRequestToJSON,
    CarritoRequestFromJSON,
    CarritoRequestToJSON,
} from '../models/index';

export interface AddItemRequest {
    id: string;
    carritoItemRequest: CarritoItemRequest;
}

export interface ClearRequest {
    id: string;
}

export interface CrearRequest {
    carritoRequest: CarritoRequest;
}

export interface Delete1Request {
    id: string;
}

export interface GetByIdRequest {
    id: string;
}

export interface ListarPorUsuario1Request {
    usuarioId?: string;
}

export interface MergeRequest {
    requestBody: { [key: string]: object; };
}

export interface RemoveItemRequest {
    id: string;
    productoId: string;
}

/**
 * 
 */
export class CarritosApi extends runtime.BaseAPI {

    /**
     * Agrega un producto al carrito del usuario autenticado. Si el producto ya existe, actualiza la cantidad.
     * Agregar item a carrito
     */
    async addItemRaw(requestParameters: AddItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling addItem().'
            );
        }

        if (requestParameters['carritoItemRequest'] == null) {
            throw new runtime.RequiredError(
                'carritoItemRequest',
                'Required parameter "carritoItemRequest" was null or undefined when calling addItem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/carritos/{id}/items`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CarritoItemRequestToJSON(requestParameters['carritoItemRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Agrega un producto al carrito del usuario autenticado. Si el producto ya existe, actualiza la cantidad.
     * Agregar item a carrito
     */
    async addItem(requestParameters: AddItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addItemRaw(requestParameters, initOverrides);
    }

    /**
     * Elimina todos los items del carrito
     * Vaciar carrito
     */
    async clearRaw(requestParameters: ClearRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling clear().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/carritos/{id}/clear`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Elimina todos los items del carrito
     * Vaciar carrito
     */
    async clear(requestParameters: ClearRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.clearRaw(requestParameters, initOverrides);
    }

    /**
     * Crea un carrito nuevo para un usuario o anónimo. Si se omite usuarioId, crea un carrito anónimo que puede sincronizarse después del login.
     * Crear carrito
     */
    async crearRaw(requestParameters: CrearRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['carritoRequest'] == null) {
            throw new runtime.RequiredError(
                'carritoRequest',
                'Required parameter "carritoRequest" was null or undefined when calling crear().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/carritos`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CarritoRequestToJSON(requestParameters['carritoRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Crea un carrito nuevo para un usuario o anónimo. Si se omite usuarioId, crea un carrito anónimo que puede sincronizarse después del login.
     * Crear carrito
     */
    async crear(requestParameters: CrearRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.crearRaw(requestParameters, initOverrides);
    }

    /**
     * Elimina un carrito por id
     * Eliminar carrito
     */
    async delete1Raw(requestParameters: Delete1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling delete1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/carritos/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Elimina un carrito por id
     * Eliminar carrito
     */
    async delete1(requestParameters: Delete1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.delete1Raw(requestParameters, initOverrides);
    }

    /**
     * Devuelve un carrito por su id
     * Obtener carrito por ID
     */
    async getByIdRaw(requestParameters: GetByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/carritos/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Devuelve un carrito por su id
     * Obtener carrito por ID
     */
    async getById(requestParameters: GetByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getByIdRaw(requestParameters, initOverrides);
    }

    /**
     * Devuelve los carritos asociados a un usuario
     * Listar carritos por usuario
     */
    async listarPorUsuario1Raw(requestParameters: ListarPorUsuario1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['usuarioId'] != null) {
            queryParameters['usuarioId'] = requestParameters['usuarioId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/carritos`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Devuelve los carritos asociados a un usuario
     * Listar carritos por usuario
     */
    async listarPorUsuario1(requestParameters: ListarPorUsuario1Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.listarPorUsuario1Raw(requestParameters, initOverrides);
    }

    /**
     * Sincroniza un carrito anónimo al usuario autenticado tras el login. Combina items del carrito anónimo con el carrito del usuario.
     * Merge de carrito anónimo
     */
    async mergeRaw(requestParameters: MergeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['requestBody'] == null) {
            throw new runtime.RequiredError(
                'requestBody',
                'Required parameter "requestBody" was null or undefined when calling merge().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/carritos/merge`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Sincroniza un carrito anónimo al usuario autenticado tras el login. Combina items del carrito anónimo con el carrito del usuario.
     * Merge de carrito anónimo
     */
    async merge(requestParameters: MergeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.mergeRaw(requestParameters, initOverrides);
    }

    /**
     * Remueve un item del carrito del usuario autenticado
     * Remover item de carrito
     */
    async removeItemRaw(requestParameters: RemoveItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling removeItem().'
            );
        }

        if (requestParameters['productoId'] == null) {
            throw new runtime.RequiredError(
                'productoId',
                'Required parameter "productoId" was null or undefined when calling removeItem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/carritos/{id}/items/{productoId}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"productoId"}}`, encodeURIComponent(String(requestParameters['productoId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remueve un item del carrito del usuario autenticado
     * Remover item de carrito
     */
    async removeItem(requestParameters: RemoveItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeItemRaw(requestParameters, initOverrides);
    }

}
