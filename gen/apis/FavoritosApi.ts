/* tslint:disable */
/* eslint-disable */
/**
 * RepoBackend API
 * API para gestión de inventario y ventas (productos, stock, carritos, facturas, talleres, favoritos)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: devs@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface AddRequest {
    productoId: string;
}

export interface IsFavRequest {
    productoId: string;
}

export interface ListRequest {
    page?: number;
    size?: number;
}

export interface Remove1Request {
    productoId: string;
}

/**
 * 
 */
export class FavoritosApi extends runtime.BaseAPI {

    /**
     * Añade un producto a la lista de favoritos del usuario autenticado
     * Agregar producto a favoritos
     */
    async addRaw(requestParameters: AddRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['productoId'] == null) {
            throw new runtime.RequiredError(
                'productoId',
                'Required parameter "productoId" was null or undefined when calling add().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/favoritos/productos/{productoId}`.replace(`{${"productoId"}}`, encodeURIComponent(String(requestParameters['productoId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Añade un producto a la lista de favoritos del usuario autenticado
     * Agregar producto a favoritos
     */
    async add(requestParameters: AddRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addRaw(requestParameters, initOverrides);
    }

    /**
     * Comprueba si un producto está en la lista de favoritos del usuario autenticado
     * Comprobar favorito
     */
    async isFavRaw(requestParameters: IsFavRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['productoId'] == null) {
            throw new runtime.RequiredError(
                'productoId',
                'Required parameter "productoId" was null or undefined when calling isFav().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/favoritos/productos/{productoId}/es-favorito`.replace(`{${"productoId"}}`, encodeURIComponent(String(requestParameters['productoId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Comprueba si un producto está en la lista de favoritos del usuario autenticado
     * Comprobar favorito
     */
    async isFav(requestParameters: IsFavRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.isFavRaw(requestParameters, initOverrides);
    }

    /**
     * Devuelve una lista paginada de productos favoritos del usuario autenticado
     * Listar favoritos
     */
    async listRaw(requestParameters: ListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/favoritos`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Devuelve una lista paginada de productos favoritos del usuario autenticado
     * Listar favoritos
     */
    async list(requestParameters: ListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.listRaw(requestParameters, initOverrides);
    }

    /**
     * Remueve un producto de la lista de favoritos del usuario autenticado
     * Remover producto de favoritos
     */
    async remove1Raw(requestParameters: Remove1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['productoId'] == null) {
            throw new runtime.RequiredError(
                'productoId',
                'Required parameter "productoId" was null or undefined when calling remove1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/favoritos/productos/{productoId}`.replace(`{${"productoId"}}`, encodeURIComponent(String(requestParameters['productoId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remueve un producto de la lista de favoritos del usuario autenticado
     * Remover producto de favoritos
     */
    async remove1(requestParameters: Remove1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.remove1Raw(requestParameters, initOverrides);
    }

}
