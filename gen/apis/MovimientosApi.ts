/* tslint:disable */
/* eslint-disable */
/**
 * RepoBackend API
 * API para gestión de inventario y ventas (productos, stock, carritos, facturas, talleres, favoritos)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: devs@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  MovimientoRequest,
} from '../models/index';
import {
    MovimientoRequestFromJSON,
    MovimientoRequestToJSON,
} from '../models/index';

export interface CrearMovimientoRequest {
    movimientoRequest: MovimientoRequest;
}

export interface GetMovimientoRequest {
    id: string;
}

export interface Listar1Request {
    productoId?: string;
    tipo?: string;
}

/**
 * 
 */
export class MovimientosApi extends runtime.BaseAPI {

    /**
     * Registra una entrada (INGRESO) o salida (EGRESO) de stock. Los tipos válidos son: INGRESO, EGRESO, VENTA, DEVOLUCION, AJUSTE.
     * Crear movimiento
     */
    async crearMovimientoRaw(requestParameters: CrearMovimientoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['movimientoRequest'] == null) {
            throw new runtime.RequiredError(
                'movimientoRequest',
                'Required parameter "movimientoRequest" was null or undefined when calling crearMovimiento().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/movimientos`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MovimientoRequestToJSON(requestParameters['movimientoRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Registra una entrada (INGRESO) o salida (EGRESO) de stock. Los tipos válidos son: INGRESO, EGRESO, VENTA, DEVOLUCION, AJUSTE.
     * Crear movimiento
     */
    async crearMovimiento(requestParameters: CrearMovimientoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.crearMovimientoRaw(requestParameters, initOverrides);
    }

    /**
     * Devuelve un movimiento por su id
     * Obtener movimiento por id
     */
    async getMovimientoRaw(requestParameters: GetMovimientoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getMovimiento().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/movimientos/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Devuelve un movimiento por su id
     * Obtener movimiento por id
     */
    async getMovimiento(requestParameters: GetMovimientoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getMovimientoRaw(requestParameters, initOverrides);
    }

    /**
     * Lista movimientos de stock. Puede filtrarse por producto o por tipo de movimiento.
     * Listar movimientos
     */
    async listar1Raw(requestParameters: Listar1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['productoId'] != null) {
            queryParameters['productoId'] = requestParameters['productoId'];
        }

        if (requestParameters['tipo'] != null) {
            queryParameters['tipo'] = requestParameters['tipo'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/movimientos`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Lista movimientos de stock. Puede filtrarse por producto o por tipo de movimiento.
     * Listar movimientos
     */
    async listar1(requestParameters: Listar1Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.listar1Raw(requestParameters, initOverrides);
    }

}
