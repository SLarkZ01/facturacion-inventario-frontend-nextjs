/* tslint:disable */
/* eslint-disable */
/**
 * RepoBackend API
 * API para gestión de inventario y ventas (productos, stock, carritos, facturas, talleres, favoritos)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: devs@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FacturaRequest,
} from '../models/index';
import {
    FacturaRequestFromJSON,
    FacturaRequestToJSON,
} from '../models/index';

export interface CheckoutRequest {
    requestBody: { [key: string]: object; };
}

export interface CrearFacturaRequest {
    requestBody: { [key: string]: object; };
}

export interface CrearFacturaDTORequest {
    facturaRequest: FacturaRequest;
}

export interface GetFacturaRequest {
    id: string;
}

export interface GetPorNumeroRequest {
    numero: string;
}

export interface ListarPorUsuarioRequest {
    userId?: string;
}

/**
 * 
 */
export class FacturasApi extends runtime.BaseAPI {

    /**
     * Crea una factura a partir de un carrito del usuario autenticado. Convierte los items del carrito en una factura y actualiza el stock.
     * Checkout carrito
     */
    async checkoutRaw(requestParameters: CheckoutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['requestBody'] == null) {
            throw new runtime.RequiredError(
                'requestBody',
                'Required parameter "requestBody" was null or undefined when calling checkout().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/facturas/checkout`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Crea una factura a partir de un carrito del usuario autenticado. Convierte los items del carrito en una factura y actualiza el stock.
     * Checkout carrito
     */
    async checkout(requestParameters: CheckoutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.checkoutRaw(requestParameters, initOverrides);
    }

    /**
     * Crea una factura usando un payload genérico
     * Crear factura (map)
     */
    async crearFacturaRaw(requestParameters: CrearFacturaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['requestBody'] == null) {
            throw new runtime.RequiredError(
                'requestBody',
                'Required parameter "requestBody" was null or undefined when calling crearFactura().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/facturas`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Crea una factura usando un payload genérico
     * Crear factura (map)
     */
    async crearFactura(requestParameters: CrearFacturaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.crearFacturaRaw(requestParameters, initOverrides);
    }

    /**
     * Crea una factura usando DTO tipado
     * Crear factura (DTO)
     */
    async crearFacturaDTORaw(requestParameters: CrearFacturaDTORequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['facturaRequest'] == null) {
            throw new runtime.RequiredError(
                'facturaRequest',
                'Required parameter "facturaRequest" was null or undefined when calling crearFacturaDTO().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/facturas/dto`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FacturaRequestToJSON(requestParameters['facturaRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Crea una factura usando DTO tipado
     * Crear factura (DTO)
     */
    async crearFacturaDTO(requestParameters: CrearFacturaDTORequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.crearFacturaDTORaw(requestParameters, initOverrides);
    }

    /**
     * Obtener factura por id
     */
    async getFacturaRaw(requestParameters: GetFacturaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getFactura().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/facturas/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Obtener factura por id
     */
    async getFactura(requestParameters: GetFacturaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getFacturaRaw(requestParameters, initOverrides);
    }

    /**
     * Obtener factura por número
     */
    async getPorNumeroRaw(requestParameters: GetPorNumeroRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['numero'] == null) {
            throw new runtime.RequiredError(
                'numero',
                'Required parameter "numero" was null or undefined when calling getPorNumero().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/facturas/numero/{numero}`.replace(`{${"numero"}}`, encodeURIComponent(String(requestParameters['numero']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Obtener factura por número
     */
    async getPorNumero(requestParameters: GetPorNumeroRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getPorNumeroRaw(requestParameters, initOverrides);
    }

    /**
     * Listar facturas por usuario
     */
    async listarPorUsuarioRaw(requestParameters: ListarPorUsuarioRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/facturas`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Listar facturas por usuario
     */
    async listarPorUsuario(requestParameters: ListarPorUsuarioRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.listarPorUsuarioRaw(requestParameters, initOverrides);
    }

}
